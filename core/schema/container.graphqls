extend type Query {
  """
  Loads a container from ID.
  Null ID returns an empty container (scratch).
  Optional platform argument initializes new containers to execute and publish as that platform.
  Platform defaults to that of the builder's host.
  """
  container(id: ContainerID, platform: Platform): Container!
}

"A unique container identifier. Null designates an empty container (scratch)."
scalar ContainerID

"""
An OCI-compatible container, also known as a docker container.
"""
type Container {
  "A unique identifier for this container."
  id: ContainerID!

  "The platform this container executes and publishes as."
  platform: Platform!

  "Creates a named sub-pipeline"
  pipeline(name: String!, description: String): Container!

  """
  Initializes this container from the base image published at the given address.
  Example:
  from("docker.io/dagger/dagger:main")
  """
  from(
    """
    Image's address from its registry.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!,
  ): Container!

  """
  Initializes this container from a Dockerfile build, using the context, a dockerfile file path and some additional buildArgs.
  Example:
  build("directory-id")
  build("directory-id", { dockerfile: "./frontend.Dockerfile" })
  build("directory-id", { buildArgs: [{ name: "MODE", value: "production }] })
  """
  build(
    "Directory context used by the Dockerfile."
    context: DirectoryID!,

    """
    Path to the Dockerfile to use.
    Defaults to './Dockerfile'.
    """
    dockerfile: String,

    "Additional build arguments."
    buildArgs: [BuildArg!],

    "Target build stage to build."
    target: String
  ): Container!

  "Retrieves this container's root filesystem. Mounts are not included."
  rootfs: Directory!

  "Retrieves this container's root filesystem. Mounts are not included."
  fs: Directory! @deprecated(reason: "Replaced by `rootfs`.")

  "Initializes this container from this DirectoryID."
  withRootfs(id: DirectoryID!): Container!

  "Initializes this container from this DirectoryID."
  withFS(id: DirectoryID!): Container!
    @deprecated(reason: "Replaced by `withRootfs`.")

  "Retrieves a directory at the given path. Mounts are included."
  directory(path: String!): Directory!

  "Retrieves a file at the given path. Mounts are included."
  file(path: String!): File!

  "Retrieves the user to be set for all commands."
  user: String

  "Retrieves this containers with a different command user."
  withUser(name: String!): Container!

  "Retrieves the working directory for all commands."
  workdir: String

  "Retrieves this container with a different working directory."
  withWorkdir(path: String!): Container!

  "Retrieves the list of environment variables passed to commands."
  envVariables: [EnvVariable!]!

  "Retrieves the value of the specified environment variable."
  envVariable(name: String!): String

  """
  Retrieves this container plus the given environment variable.
  Example:
  withEnvVariable("HOST", "localhost")
  """
  withEnvVariable(
    "The identifier of the environment variable."
    name: String!,

    "The value of the environment variable."
    value: String!
  ): Container!

  "Retrieves the list of labels passed to container."
  labels: [Label!]!

  "Retrieves the value of the specified label."
  label(name: String!): String

  "Retrieves this container plus the given label."
  withLabel(name: String!, value: String!): Container!

  "Retrieves this container minus the given environment label."
  withoutLabel(name: String!): Container!

  """
  Retrieves this container plus an env variable containing the given secret.
  Example:
  withSecretVariable("API_SECRET", "secret-id")
  """
  withSecretVariable(
    "The identifier of the secret variable."
    name: String!,

    "The identifier of the secret value."
    secret: SecretID!
  ): Container!

  """
  Retrieves this container minus the given environment variable.
  Example:
  withoutEnvVariable("HOST")
  """
  withoutEnvVariable(
    "The identifier of the environment variable."
    name: String!
  ): Container!

  "Retrieves entrypoint to be prepended to the arguments of all commands."
  entrypoint: [String!]

  """
  Retrieves this container but with a different command entrypoint.
  Example:
  withEntrypoint(["go", "run"])
  """
  withEntrypoint(
    "Entrypoint to use for future executions."
    args: [String!]!
  ): Container!

  "Retrieves default arguments for future commands."
  defaultArgs: [String!]

  """
  Configures default arguments for future commands.
  Example:
  withDefaultArgs(["-v", "--no-cache"])
  """
  withDefaultArgs(
    "Arguments to prepend to future executions."
    args: [String!]
  ): Container!

  "Retrieves the list of paths where a directory is mounted."
  mounts: [String!]!

  """
  Retrieves this container plus a directory mounted at the given path.
  Example:
  withMountedDirectory("/tmp/mounted_dir", "directory-id")
  """
  withMountedDirectory(
    "Location of the mounted directory."
    path: String!,

    "Identifier of the mounted directory."
    source: DirectoryID!
  ): Container!

  """
  Retrieves this container plus a file mounted at the given path.
  Example:
  withMountedFile("/tmp/file.txt", "source-id")
  """
  withMountedFile(
    "Location of the mounted file."
    path: String!,

    "Identifier of the mounted file."
    source: FileID!
  ): Container!

  """
  Retrieves this container plus a temporary directory mounted at the given path.
  Example:
  withMountedTemp("/tmp/temp_dir")
  """
  withMountedTemp(
    "Location of the temporary directory."
    path: String!
  ): Container!

  """
  Retrieves this container plus a cache volume mounted at the given path.
  Example:
  withMountedCache("/cache/node_modules", "cache-id", "source-id")
  """
  withMountedCache(
    """
    Location of the cache directory.

    Example:
    /cache/node_modules
    """
    path: String!,

    "Identifier of the cache volume to mount."
    cache: CacheID!,

    "Identifier of the directory to use as the cache volume's root."
    source: DirectoryID

    "Sharing mode of the cache volume."
    sharing: CacheSharingMode
  ): Container!

  """
  Retrieves this container plus a secret mounted into a file at the given path.
  Example:
  withMountedSecret("/tmp/secret.txt", "source-id")
  """
  withMountedSecret(
    "Location of the secret file."
    path: String!,

    "Identifier of the secret to mount."
    source: SecretID!
  ): Container!

  """
  Retrieves this container after unmounting everything at the given path.
  Example:
  withoutMount("/cache/node_modules")
  """
  withoutMount(
    "Location of the cache directory."
    path: String!
  ): Container!

  """
  Retrieves this container plus the contents of the given file copied to the given path.
  Example:
  withFile("/tmp/file.txt", "source-id")
  withFile("/tmp/file.txt", "source-id", { permissions: 0600 })
  """
  withFile(
    "Location of the copied file."
    path: String!,

    "Identifier of the file to copy."
    source: FileID!,

    """
    Permission given to the copied file.
    Default to 0644.
    """
    permissions: Int
  ): Container!

  """
  Retrieves this container plus a new file written at the given path.
  Example:
  withNewFile("/tmp/file.txt", "Hello world!")
  withNewFile("/tmp/file.txt", "Hello world!", { permissions: 0600 })
  """
  withNewFile(
    "Location of the written file."
    path: String!,

    "Content of the file to write."
    contents: String,

    """
    Permission given to the written file.
    Default to 0644.
    """
    permissions: Int
  ): Container!

  """
  Retrieves this container plus a directory written at the given path.
  Example:
  withDirectory("/tmp/directory", "directory-id")
  withDirectory("/tmp/directory", "directory-id", { excludes: ["node_modules/**", ".gitignore", ".git/"] })
  withDirectory("/tmp/directory", "directory-id", { include: ["*.go", "go.mod", "go.sum"] })
  """
  withDirectory(
    "Location of the written directory."
    path: String!,

    "Identifier of the directory to write"
    directory: DirectoryID!,

    "Patterns to exclude in the written directory."
    exclude: [String!],

    "Patterns to include in the written directory."
    include: [String!]
  ): Container!

  """
  Retrieves this container plus a socket forwarded to the given Unix socket path.
  Example:
  withUnixSocket("/tmp/socket", "source-id")
  """
  withUnixSocket(
    "Location of the forwarded Unix socket."
    path: String!,

    "Identifier of the socket to forward."
    source: SocketID!
  ): Container!

  """
  Retrieves this container with a previously added Unix socket removed.
  Example:
  withoutUnixSocket("/tmp/socket")
  """
  withoutUnixSocket(
    "Location of the socket to remove."
    path: String!
  ): Container!

  """
  Retrieves this container after executing the specified command inside it.
  Example:
  withExec(["run", "main.go"])
  withExec(["run", "main.go"], { stdin: "Hello world" })
  withExec(["run", "main.go"], { redirectStdout: "/tmp/stdout",  redirectStderr: "/tmp/stderr" })
  withExec(["run", "main.go"], { experimentalPrivilegedNesting: true })
  """
  withExec(
    "Command to run instead of the container's default command."
    args: [String!]!,

    "Content to write to the command's standard input before closing."
    stdin: String,

    "Redirect the command's standard output to a file in the container."
    redirectStdout: String,

    "Redirect the command's standard error to a file in the container."
    redirectStderr: String,

    """
    Provide dagger access to the executed command.
    Do not use this option unless you trust the command being executed.
    The command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    """
    experimentalPrivilegedNesting: Boolean
  ): Container!

  """
  Retrieves this container after executing the specified command inside it.
  Example:
  exec(["run", "main.go"])
  exec(["run", "main.go"], { stdin: "Hello world" })
  exec(["run", "main.go"], { redirectStdout: "/tmp/stdout",  redirectStderr: "/tmp/stderr" })
  exec(["run", "main.go"], { experimentalPrivilegedNesting: true })
  """
  exec(
    "Command to run instead of the container's default command."
    args: [String!],

    "Content to write to the command's standard input before closing."
    stdin: String,

    "Redirect the command's standard output to a file in the container."
    redirectStdout: String,

    "Redirect the command's standard error to a file in the container."
    redirectStderr: String

    """
    Provide dagger access to the executed command.
    Do not use this option unless you trust the command being executed.
    The command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    """
    experimentalPrivilegedNesting: Boolean
  ): Container! @deprecated(reason: "Replaced by `withExec`.")

  """
  Exit code of the last executed command. Zero means success.
  Null if no command has been executed.
  """
  exitCode: Int

  """
  The output stream of the last executed command.
  Null if no command has been executed.
  """
  stdout: String

  """
  The error stream of the last executed command.
  Null if no command has been executed.
  """
  stderr: String

  # FIXME: this is the last case of an actual "verb" that cannot cleanly go away.
  #    This may actually be a good candidate for a mutation. To be discussed.
  """
  Publishes this container as a new image to the specified address, for the platformVariants, returning a fully qualified ref.
  Example:
  publish("docker.io/dagger/dagger:main")
  publish("docker.io/dagger/dagger:main", { platformVariants: ["container-id"] })
  """
  publish(
    """
    Registry's address to publish the image to.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!,

    """
    Identifiers for other platform specific containers.
    Used for multi-platform image.
    """
    platformVariants: [ContainerID!]
  ): String!

  """
  Writes the container as an OCI tarball to the destination file path on the host for the specified platformVariants.
  Return true on success.
  Example:
  export("./tarball")
  export("./tarball", { platformVariants: ["container-id"] })
  """
  export(
    """
    Host's destination path.
    Path can be relative to the engine's workdir or absolute.
    Example:
    ./tarball
    """
    path: String!,

    """
    Identifiers for other platform specific containers.
    Used for multi-platform image.
    """
    platformVariants: [ContainerID!]
  ): Boolean!

  "Retrieves this container with a registry authentication for a given address."
  withRegistryAuth(
    """
    Registry's address to bind the authentication to.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!,

    """
    The username of the registry's account (e.g., "Dagger").
    """
    username: String!,

    """
    The API key, password or token to authenticate to this registry.
    """
    secret: SecretID!,
  ): Container!

  "Retrieves this container without the registry authentication of a given address."
  withoutRegistryAuth(
    """
    Registry's address to remove the authentication from.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!
  ): Container!
}

"A simple key value object that represents an environment variable."
type EnvVariable {
  "The environment variable name."
  name: String!

  "The environment variable value."
  value: String!
}

"A simple key value object that represents a label."
type Label {
  "The label name."
  name: String!

  "The label value."
  value: String!
}

"Key value object that represents a build argument."
input BuildArg {
  "The build argument name."
  name: String!

  "The build argument value."
  value: String!
}
